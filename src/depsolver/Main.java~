package depsolver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

class Package {
  private String name;
  private String version;
  private Integer size;
  private List<List<String>> depends = new ArrayList<>();
  private List<String> conflicts = new ArrayList<>();

  public String getName() { return name; }
  public String getVersion() { return version; }
  public Integer getSize() { return size; }
  public List<List<String>> getDepends() { return depends; }
  public List<String> getConflicts() { return conflicts; }
  public void setName(String name) { this.name = name; }
  public void setVersion(String version) { this.version = version; }
  public void setSize(Integer size) { this.size = size; }
  public void setDepends(List<List<String>> depends) { this.depends = depends; }
  public void setConflicts(List<String> conflicts) { this.conflicts = conflicts; }
}



public class Main {
static List<String> initial;
static ArrayList<String> jsonCommands;
  public static void main(String[] args) throws IOException {
    TypeReference<List<Package>> repoType = new TypeReference<List<Package>>() {};
    List<Package> repo = JSON.parseObject(readFile(args[0]), repoType);
    TypeReference<List<String>> strListType = new TypeReference<List<String>>() {};
    initial = JSON.parseObject(readFile(args[1]), strListType);
    List<String> constraints = JSON.parseObject(readFile(args[2]), strListType);


// *****************************************
    jsonCommands = new ArrayList<String>();
    for(String c : constraints){
      if(c.charAt(0) == '+'){
        install(c);
      } else if(c.charAt(0) == '-'){
        uninstall(c);
      } else {
        System.out.println("unknown sign, avoiding " + c + "as unknown constraint"); 
      }
    }
    String output = JSON.toJSONString(jsonCommands);
    System.out.println(output);
    PrintWriter writer = new PrintWriter("commands.json", "UTF-8");
    writer.println(output);
    writer.close();
  }

  private static void uninstall(String packageToRemove) {
    if(isInstalled(packageToRemove)){
      System.out.println("package "+ packageToRemove +" is being uninstalled");
      jsonCommands.add(packageToRemove);
    } else {
      System.out.println("package "+ packageToRemove +" is not installed");
    }
  }

  private static void install(String packageToInstall) {
    if(!isInstalled(packageToInstall)){
      System.out.println("package " + packageToInstall +" needs to be installed");
      jsonCommands.add(packageToInstall);
    } else {
      System.out.println("package "+ packageToInstall +" is already installed");
    }
  }

  private static boolean isInstalled(String pName){
    String name = pName.substring(1, pName.length());
    String[] details = name.split("=");
    for(String s : initial){
      if(s.contains(details[0])){
        String[] v = s.split("=");
        String installedVersion = v[1];
        String requestedVersion = details[1];
        if(installedVersion.equals(requestedVersion)){
          return true;
        }
      }
    }
    return false;
  }

// *****************************************
  static String readFile(String filename) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(filename));
    StringBuilder sb = new StringBuilder();
    br.lines().forEach(line -> sb.append(line));
    return sb.toString();
  }
}
